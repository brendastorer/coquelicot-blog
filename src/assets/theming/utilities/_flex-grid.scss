/* flex */
.flex {
  display: flex;
}

.flex--none {
  flex: none;
}

.flex--column {
  flex-direction: column;
}

.flex--wrap {
  flex-wrap: wrap;
}

.flex--justify-space-between {
  justify-content: space-between;
}

.flex--justify-center {
  justify-content: center;
}

.flex--align-center {
  align-items: center;
}

.flex--align-baseline {
  align-items: baseline;
}

.flex--align-start {
  align-items: flex-start;
}

.flex--align-end {
  align-items: flex-end;
}

.flex--align-center--justify-space-between {
  align-items: center;
  justify-content: space-between;
}

.flex--align-center--justify-center {
  align-items: center;
  justify-content: center;
}

.flex--align-baseline--justify-center {
  align-items: baseline;
  justify-content: center;
}

.flex--align-end--justify-space-between {
  align-items: flex-end;
  justify-content: space-between;
}

.flex--align-start--justify-space-between {
  align-items: flex-start;
  justify-content: space-between;
}

.flex--justify-end,
.flex--justify-right {
  justify-content: end;
}

.flex-align--top-left {
  align-items: start;
  justify-content: flex-start;
}

.flex-align--top-center {
  align-items: start;
  justify-content: center;
}

.flex-align--top-right {
  align-items: start;
  justify-content: flex-end;
}

.flex-align--middle-left {
  align-items: center;
  justify-content: flex-start;
}

.flex-align--middle-center {
  align-items: center;
  justify-content: center;
}

.flex-align--middle-right {
  align-items: center;
  justify-content: flex-end;
}

.flex-align--bottom-left {
  align-items: end;
  justify-content: flex-start;
}

.flex-align--bottom-center {
  align-items: end;
  justify-content: center;
}

.flex-align--bottom-right {
  align-items: end;
  justify-content: right;
}

/* grid */
.grid--auto-columns {
  display: grid;
  gap: var(--space-grid-gap);
  grid-auto-flow: column;
  grid-template-columns: repeat(auto-fit, minmax(0, 1fr));
}

// Easy even columns, 1 - 6. Example .grid--2-columns
@for $i from 1 through 6 {
  .grid--#{$i}-columns {
    display: grid;
    grid-gap: var(--space--grid-gap);
    grid-template-columns: repeat(#{$i}, 1fr);
  }

  .grid--#{$i}-columns--xsmall-up {
    @include breakpoint(xsmall-up) {
      display: grid;
      grid-gap: var(--space--grid-gap);
      grid-template-columns: repeat(#{$i}, minmax(0, 1fr));
    }
  }

  .grid--#{$i}-columns--small-up {
    @include breakpoint(small-up) {
      display: grid;
      grid-gap: var(--space--grid-gap);
      grid-template-columns: repeat(#{$i}, minmax(0, 1fr));
    }
  }

  .grid--#{$i}-columns--medium-up {
    @include breakpoint(medium-up) {
      display: grid;
      grid-gap: var(--space--grid-gap);
      grid-template-columns: repeat(#{$i}, minmax(0, 1fr));
    }
  }

  .grid--#{$i}-columns--large-up {
    @include breakpoint(large-up) {
      display: grid;
      grid-gap: var(--space--grid-gap);
      grid-template-columns: repeat(#{$i}, minmax(0, 1fr));
    }
  }
}

.grid__item--span-2-columns {
  grid-column: span 2;
}

.grid__item--span-all-columns {
  grid-column: 1 / -1;
}

.grid__item--first-column {
  grid-column: 1;
}

.grid__item--second-column {
  grid-column: 2;
}

.grid__item--first-row {
  grid-row: 1;
}

@each $breakpoint-name, $breakpoint-value in $unset-breakpoints {
  .flex-grid--reset#{$breakpoint-name} {
    @include breakpoint($breakpoint-value) {
      display: block;
    }
  }
}